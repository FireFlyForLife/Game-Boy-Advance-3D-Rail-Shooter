#include "../include/asm/graphics.h"
#include "../include/asm/utils.h"
#include "../include/input.h"
#include "../include/asm/gameObject.h"
#include "../include/objModel.h"
#include "../include/objModelGM.h"
#include "raycaster/raycaster.h"

#define ENABLE_RAYCASTER 1


// 1, 8x8 sprite per row.
const unsigned short PLANE_SPRITES[] = {
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0F00, 0x000F, 0x0000, 0x0000, 0x0900, 0x0B09, 0x0000, 0x0000, 0x0000, 0x0906, 0x0B09, 0x0006, 0x0000, 0x0902, 0x0909, 0x090B, 0x0209, 0x0202, 0x0202, 0x0202, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0009, 0x0000, 0x0000, 0x0000, 0x0604, 0x0906, 0x0B0B, 0x0B0B, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0B0B, 0x0609, 0x0909, 0x070B, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0E0C, 0x070E, 0x0000, 0x0000, 
    0x0303, 0x0505, 0x0808, 0x0308, 0x0D0F, 0x080A, 0x0A05, 0x0D03, 0x0000, 0x0A00, 0x0A0A, 0x0808, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0D08, 0x0F0F, 0x0D0F, 0x030A, 0x0D0F, 0x080A, 0x0303, 0x0503, 0x0105, 0x0301, 0x0303, 0x0303, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0503, 0x0805, 0x0A0A, 0x0A0A, 0x0D0A, 0x0F0F, 0x0F0F, 0x0F0F, 0x0505, 0x0505, 0x0505, 0x0505, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x080A, 0x0C07, 0x0008, 0x0000, 0x0F0F, 0x0F0F, 0x000D, 0x0000, 0x0503, 0x0505, 0x0003, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};

// All 256 colors. Color 0 is transparent.
const unsigned short COLOR_PALETTE[] = {
    0x0000, 0x1084, 0x2C86, 0x2108, 0x410A, 0x35AD, 0x718E, 0x0010, 0x4631, 0x6212, 0x5AD6, 0x7AD8, 0x017A, 0x6B5A, 0x5B9E, 0x7BDE, 
    0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 
    0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 
    0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 
    0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF,
    0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 
    0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 
    0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 
    0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 
    0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF,
    0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 
    0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 
    0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 
    0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 
    0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF,
    0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF
};

#define COLOR_256	0x2000
#define SIZE_8		0x0
#define SIZE_16		0x4000
#define SIZE_32		0x8000
#define SIZE_64		0xC000

unsigned short* OAM_MEM =(unsigned short*)0x7000000;	//setup a pointer to OBJ memory

int main(void)
{
#if ENABLE_RAYCASTER
    raycaster_init();

    while(true) {
        keyPoll();
        raycaster_render();
    }

    raycaster_cleanup();
#else

    pushGameObject(8, 9, 10, 11, (u32)(updateEnemy));
    pushGameObject(8, 9, 10, 11, (u32)(updateEnemy));
    pushGameObject(8, 9, 10, 11, (u32)(updateEnemy));
    pushGameObject(8, 9, 10, 11, (u32)(updateEnemy));
    pushGameObject(8, 9, 10, 11, (u32)(updateEnemy));
    popGameObject();

    // Camera setup
    s32 camX = 0;
    s32 camY = 0;
    s32 camZ = 10;

    // Rendering setup
    u32 clrScreenColor = 0xFFFFFFFF;
    initGraphics();

    // Sprite setup
    setSpritePalette((u32)(&COLOR_PALETTE));
    setSpriteSheet((u32)(&PLANE_SPRITES), 8);

    // debug
    u32 testColor = 0xFF;
    bool drawThick = true;
	OAM_MEM[0] = COLOR_256 | SIZE_16 | 50; // 256 color mode. Height: 16 pixels. Ypos: 50
	OAM_MEM[1] = SIZE_32 | 110;	// Width: 32 pixels. Xpos: 110.
	OAM_MEM[2] = 512 + 0; // Tile number, starting at 512 because bitmap mode is used.
    OAM_MEM[3] = 0; // Filler

	while(true) {
        g_GraphicsAddr = startDraw(g_GraphicsAddr);
        clearScr(g_GraphicsAddr, (u32)(&clrScreenColor), 0);
        keyPoll();

        noCashStartTimer();
        noCashStopTimer();
        // Update
        //updateGameObjects();
        noCashPrintVar("Camera (%vl%, %vl%, %vl%)", camX, camY, camZ);

        // Rendering
        //draw3DModel(g_GraphicsAddr, (u32)(&CANYON), CANYON_SIZE, camX, camY, camZ);
        draw3DModel(g_GraphicsAddr, (u32)(&OBJMODEL), OBJMODEL_SIZE, camX, camY, camZ);

        //drawLine(g_GraphicsAddr, 120, 80,  -5, 5, 0xFF);
        //drawLine(g_GraphicsAddr, 120, 80, 120, 5, 0xFF);
        //drawLine(g_GraphicsAddr, 120, 80, 245, 5, 0xFF);
        //drawLine(g_GraphicsAddr, 120, 80, -5 , 80, 0xFF);
        //drawLine(g_GraphicsAddr, 120, 80, 120, 80, 0xFF);
        //drawLine(g_GraphicsAddr, 120, 80, 245, 80, 0xFF);
        //drawLine(g_GraphicsAddr, 120, 80,  -5, 155, 0xFF);
        //drawLine(g_GraphicsAddr, 120, 80, 120, 155, 0xFF);
        //drawLine(g_GraphicsAddr, 120, 80, 245, 155, 0xFF);
        //drawHorzLine(g_GraphicsAddr, 0, 60, 240, (u32)(&testColor));
        //drawVertLine(g_GraphicsAddr, 100, 0, 160, (u32)(&testColor));
        //drawPixel(g_GraphicsAddr, 10, 20, 0xFF);

        // Movement
        if (keyIsDown(KEY_RIGHT))
            camX--;
        if (keyIsDown(KEY_LEFT))
            camX++;
        if (keyIsDown(KEY_R))
            camY--;
        if (keyIsDown(KEY_L))
            camY++;
        if (keyIsDown(KEY_UP))
            camZ--;
        if (keyIsDown(KEY_DOWN))
            camZ++;

        // Pause
        if (keyIsPressed(KEY_START)) {
            bool isWireFrame = !isWireframeEnabled();
            setWireframe(!isWireframeEnabled(), drawThick);
            if (isWireFrame)
                drawThick = !drawThick;
        }
    }
#endif

	return 0;
}